# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://vagrantcloud.com/search.
  config.vm.box = "ubuntu/focal64"

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"
   
   # Increase boot timeout for slower systems
   config.vm.boot_timeout = 600
   
    config.vm.define "server-vm" do |server|
        server.vm.box = "ubuntu/focal64"
        server.vm.hostname = "server-vm"
        server.vm.network "private_network", ip: "192.168.56.14"
        server.vm.provider "virtualbox" do |vb|
            vb.memory = "1024"
            vb.cpus = "1"
            vb.name = "server-vm"
        end
    end
    config.vm.define "client-vm" do |client|
        client.vm.box = "ubuntu/focal64"
        client.vm.hostname = "client-vm"
        server.vm.network "private_network", ip: "192.168.56.15"
        client.vm.provider "virtualbox" do |vb|
            vb.memory = "1024"
            vb.cpus = "1"
            vb.name = "client-vm"
            
        end

    end
  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
#    config.vm.network "public_network"
  config.ssh
  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.

  # Windows Path
  # config.vm.synced_folder "F:\\scripts\\shellscripts", "/opt/scripts"

  # MacOS
  #  config.vm.synced_folder "/Users/imran/Desktop/scripts", "/opt/scripts"


  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
   config.vm.provider "virtualbox" do |vb|
  #   # Display the VirtualBox GUI when booting the machine
     vb.gui = true
     vb.customize [ "modifyvm", :id, "--uartmode1", "disconnected" ]
     # Add these optimizations for faster boot
     vb.customize ["modifyvm", :id, "--natdnshostresolver1", "on"]
     vb.customize ["modifyvm", :id, "--natdnsproxy1", "on"]
  #   # Customize the amount of memory on the VM:
     vb.memory = "2048"
     vb.cpus = "2"
   end
# The following line disables the default synced folder, which can cause issues on Windows hosts.
# If you need to share folders, configure them explicitly below.
  # View the documentation for the provider you are using for more
  # information on available options.
   config.vm.synced_folder '.', '/vagrant', disabled: true

  # Enable provisioning with a shell script. Additional provisioners such as
  # Ansible, Chef, Docker, Puppet and Salt are also available. Please see the
  # documentation for more information about their specific syntax and use.

  config.vm.provision "shell", inline: <<-SHELL
     set -e  # Exit on any error
     
     echo "Starting provisioning..."
     sudo apt-get update -y
     sudo apt-get upgrade -y
     sudo loadkeys pt
     SHELL
end